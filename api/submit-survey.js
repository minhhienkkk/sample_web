import { formidable } from 'formidable';
import fs from 'fs'; // Import th∆∞ vi·ªán 'fs' ƒë·ªÉ ƒë·ªçc file
import FormData from 'form-data'; // Import th∆∞ vi·ªán 'form-data'

// T·∫Øt body parser m·∫∑c ƒë·ªãnh c·ªßa Vercel
export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(request, response) {
  if (request.method !== 'POST') {
    return response.status(405).json({ error: 'Method Not Allowed' });
  }

  try {
    const form = formidable({});
    const [fields, files] = await form.parse(request);

    const imageFile = files.image?.[0];

    // B·∫Øt bu·ªôc ph·∫£i c√≥ ·∫£nh trong ch·∫ø ƒë·ªô n√†y
    if (!imageFile) {
      return response.status(400).json({ error: 'Image file is required.' });
    }

    // L·∫•y th√¥ng tin t·ª´ c√°c tr∆∞·ªùng text
    const rating = fields.interface_rating?.[0] || 'Ch∆∞a ƒë√°nh gi√°';
    const sources = fields.source?.join(', ') || 'Kh√¥ng ch·ªçn';
    const feedback = fields.feedback?.[0].trim() || 'Kh√¥ng c√≥ g√≥p √Ω';
    
    // ƒê·ªãnh d·∫°ng n·ªôi dung tin nh·∫Øn ƒë·ªÉ l√†m ch√∫ th√≠ch (caption) cho ·∫£nh
    let caption = `üîî *K·∫øt qu·∫£ kh·∫£o s√°t m·ªõi!*\n\n`;
    caption += `*1. ƒê√°nh gi√°:* ${rating}\n`;
    caption += `*2. Ngu·ªìn:* ${sources}\n`;
    caption += `*3. G√≥p √Ω:* ${feedback}`;

    // T·∫°o m·ªôt FormData m·ªõi ƒë·ªÉ g·ª≠i ƒë·∫øn Telegram
    const telegramFormData = new FormData();
    telegramFormData.append('chat_id', process.env.CHAT_ID);
    telegramFormData.append('caption', caption);
    telegramFormData.append('parse_mode', 'Markdown');
    
    // Th√™m file ·∫£nh v√†o FormData
    // fs.createReadStream() hi·ªáu qu·∫£ h∆°n cho file l·ªõn
    telegramFormData.append('photo', fs.createReadStream(imageFile.filepath), {
        filename: imageFile.originalFilename,
        contentType: imageFile.mimetype,
    });
    
    // G·ª≠i y√™u c·∫ßu ƒë·∫øn API sendPhoto c·ªßa Telegram
    const botToken = process.env.BOT_TOKEN;
    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendPhoto`;

    const telegramResponse = await fetch(telegramUrl, {
      method: 'POST',
      body: telegramFormData,
      // KH√îNG set header 'Content-Type', fetch s·∫Ω t·ª± ƒë·ªông l√†m ƒëi·ªÅu ƒë√≥
    });

    const result = await telegramResponse.json();
    if (!result.ok) {
        // Ghi l·∫°i l·ªói t·ª´ Telegram ƒë·ªÉ debug
        console.error('Telegram API Error:', result);
        throw new Error('Failed to send photo to Telegram.');
    }

    response.status(200).json({ success: true });

  } catch (error) {
    console.error(error);
    response.status(500).json({ error: 'Server error processing the request.' });
  }
}